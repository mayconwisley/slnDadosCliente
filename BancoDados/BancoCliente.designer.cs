#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BancoDados
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DbCliente")]
	public partial class BancoClienteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCliente(Cliente instance);
    partial void UpdateCliente(Cliente instance);
    partial void DeleteCliente(Cliente instance);
    partial void InsertTipoConexao(TipoConexao instance);
    partial void UpdateTipoConexao(TipoConexao instance);
    partial void DeleteTipoConexao(TipoConexao instance);
    partial void InsertConexao(Conexao instance);
    partial void UpdateConexao(Conexao instance);
    partial void DeleteConexao(Conexao instance);
    partial void InsertModCli(ModCli instance);
    partial void UpdateModCli(ModCli instance);
    partial void DeleteModCli(ModCli instance);
    partial void InsertModulo(Modulo instance);
    partial void UpdateModulo(Modulo instance);
    partial void DeleteModulo(Modulo instance);
    partial void InsertSenhaSGU(SenhaSGU instance);
    partial void UpdateSenhaSGU(SenhaSGU instance);
    partial void DeleteSenhaSGU(SenhaSGU instance);
    #endregion
		
		public BancoClienteDataContext() : 
				base(global::BancoDados.Properties.Settings.Default.DbClienteConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BancoClienteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BancoClienteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BancoClienteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BancoClienteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cliente> Clientes
		{
			get
			{
				return this.GetTable<Cliente>();
			}
		}
		
		public System.Data.Linq.Table<TipoConexao> TipoConexaos
		{
			get
			{
				return this.GetTable<TipoConexao>();
			}
		}
		
		public System.Data.Linq.Table<Conexao> Conexaos
		{
			get
			{
				return this.GetTable<Conexao>();
			}
		}
		
		public System.Data.Linq.Table<ModCli> ModClis
		{
			get
			{
				return this.GetTable<ModCli>();
			}
		}
		
		public System.Data.Linq.Table<Modulo> Modulos
		{
			get
			{
				return this.GetTable<Modulo>();
			}
		}
		
		public System.Data.Linq.Table<SenhaSGU> SenhaSGUs
		{
			get
			{
				return this.GetTable<SenhaSGU>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cliente")]
	public partial class Cliente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nome;
		
		private EntitySet<Conexao> _Conexaos;
		
		private EntitySet<ModCli> _ModClis;
		
		private EntitySet<SenhaSGU> _SenhaSGUs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Cliente()
		{
			this._Conexaos = new EntitySet<Conexao>(new Action<Conexao>(this.attach_Conexaos), new Action<Conexao>(this.detach_Conexaos));
			this._ModClis = new EntitySet<ModCli>(new Action<ModCli>(this.attach_ModClis), new Action<ModCli>(this.detach_ModClis));
			this._SenhaSGUs = new EntitySet<SenhaSGU>(new Action<SenhaSGU>(this.attach_SenhaSGUs), new Action<SenhaSGU>(this.detach_SenhaSGUs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cliente_Conexao", Storage="_Conexaos", ThisKey="Id", OtherKey="Id_Cliente")]
		public EntitySet<Conexao> Conexaos
		{
			get
			{
				return this._Conexaos;
			}
			set
			{
				this._Conexaos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cliente_ModCli", Storage="_ModClis", ThisKey="Id", OtherKey="Id_Cliente")]
		public EntitySet<ModCli> ModClis
		{
			get
			{
				return this._ModClis;
			}
			set
			{
				this._ModClis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cliente_SenhaSGU", Storage="_SenhaSGUs", ThisKey="Id", OtherKey="Id_Cliente")]
		public EntitySet<SenhaSGU> SenhaSGUs
		{
			get
			{
				return this._SenhaSGUs;
			}
			set
			{
				this._SenhaSGUs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conexaos(Conexao entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = this;
		}
		
		private void detach_Conexaos(Conexao entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = null;
		}
		
		private void attach_ModClis(ModCli entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = this;
		}
		
		private void detach_ModClis(ModCli entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = null;
		}
		
		private void attach_SenhaSGUs(SenhaSGU entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = this;
		}
		
		private void detach_SenhaSGUs(SenhaSGU entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoConexao")]
	public partial class TipoConexao : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descricao;
		
		private EntitySet<Conexao> _Conexaos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    #endregion
		
		public TipoConexao()
		{
			this._Conexaos = new EntitySet<Conexao>(new Action<Conexao>(this.attach_Conexaos), new Action<Conexao>(this.detach_Conexaos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descricao", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoConexao_Conexao", Storage="_Conexaos", ThisKey="Id", OtherKey="Id_TipoConexao")]
		public EntitySet<Conexao> Conexaos
		{
			get
			{
				return this._Conexaos;
			}
			set
			{
				this._Conexaos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conexaos(Conexao entity)
		{
			this.SendPropertyChanging();
			entity.TipoConexao = this;
		}
		
		private void detach_Conexaos(Conexao entity)
		{
			this.SendPropertyChanging();
			entity.TipoConexao = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Conexao")]
	public partial class Conexao : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Ip;
		
		private string _Porta;
		
		private string _Senha;
		
		private string _Dominio;
		
		private int _Id_Cliente;
		
		private int _Id_TipoConexao;
		
		private EntityRef<Cliente> _Cliente;
		
		private EntityRef<TipoConexao> _TipoConexao;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    partial void OnPortaChanging(string value);
    partial void OnPortaChanged();
    partial void OnSenhaChanging(string value);
    partial void OnSenhaChanged();
    partial void OnDominioChanging(string value);
    partial void OnDominioChanged();
    partial void OnId_ClienteChanging(int value);
    partial void OnId_ClienteChanged();
    partial void OnId_TipoConexaoChanging(int value);
    partial void OnId_TipoConexaoChanged();
    #endregion
		
		public Conexao()
		{
			this._Cliente = default(EntityRef<Cliente>);
			this._TipoConexao = default(EntityRef<TipoConexao>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(10)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Porta", DbType="VarChar(10)")]
		public string Porta
		{
			get
			{
				return this._Porta;
			}
			set
			{
				if ((this._Porta != value))
				{
					this.OnPortaChanging(value);
					this.SendPropertyChanging();
					this._Porta = value;
					this.SendPropertyChanged("Porta");
					this.OnPortaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Senha", DbType="VarChar(100)")]
		public string Senha
		{
			get
			{
				return this._Senha;
			}
			set
			{
				if ((this._Senha != value))
				{
					this.OnSenhaChanging(value);
					this.SendPropertyChanging();
					this._Senha = value;
					this.SendPropertyChanged("Senha");
					this.OnSenhaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dominio", DbType="VarChar(150)")]
		public string Dominio
		{
			get
			{
				return this._Dominio;
			}
			set
			{
				if ((this._Dominio != value))
				{
					this.OnDominioChanging(value);
					this.SendPropertyChanging();
					this._Dominio = value;
					this.SendPropertyChanged("Dominio");
					this.OnDominioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Cliente", DbType="Int NOT NULL")]
		public int Id_Cliente
		{
			get
			{
				return this._Id_Cliente;
			}
			set
			{
				if ((this._Id_Cliente != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ClienteChanging(value);
					this.SendPropertyChanging();
					this._Id_Cliente = value;
					this.SendPropertyChanged("Id_Cliente");
					this.OnId_ClienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_TipoConexao", DbType="Int NOT NULL")]
		public int Id_TipoConexao
		{
			get
			{
				return this._Id_TipoConexao;
			}
			set
			{
				if ((this._Id_TipoConexao != value))
				{
					if (this._TipoConexao.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_TipoConexaoChanging(value);
					this.SendPropertyChanging();
					this._Id_TipoConexao = value;
					this.SendPropertyChanged("Id_TipoConexao");
					this.OnId_TipoConexaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cliente_Conexao", Storage="_Cliente", ThisKey="Id_Cliente", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.Conexaos.Remove(this);
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.Conexaos.Add(this);
						this._Id_Cliente = value.Id;
					}
					else
					{
						this._Id_Cliente = default(int);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoConexao_Conexao", Storage="_TipoConexao", ThisKey="Id_TipoConexao", OtherKey="Id", IsForeignKey=true)]
		public TipoConexao TipoConexao
		{
			get
			{
				return this._TipoConexao.Entity;
			}
			set
			{
				TipoConexao previousValue = this._TipoConexao.Entity;
				if (((previousValue != value) 
							|| (this._TipoConexao.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoConexao.Entity = null;
						previousValue.Conexaos.Remove(this);
					}
					this._TipoConexao.Entity = value;
					if ((value != null))
					{
						value.Conexaos.Add(this);
						this._Id_TipoConexao = value.Id;
					}
					else
					{
						this._Id_TipoConexao = default(int);
					}
					this.SendPropertyChanged("TipoConexao");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModCli")]
	public partial class ModCli : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Id_Cliente;
		
		private int _Id_Modulo;
		
		private EntityRef<Cliente> _Cliente;
		
		private EntityRef<Modulo> _Modulo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnId_ClienteChanging(int value);
    partial void OnId_ClienteChanged();
    partial void OnId_ModuloChanging(int value);
    partial void OnId_ModuloChanged();
    #endregion
		
		public ModCli()
		{
			this._Cliente = default(EntityRef<Cliente>);
			this._Modulo = default(EntityRef<Modulo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Cliente", DbType="Int NOT NULL")]
		public int Id_Cliente
		{
			get
			{
				return this._Id_Cliente;
			}
			set
			{
				if ((this._Id_Cliente != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ClienteChanging(value);
					this.SendPropertyChanging();
					this._Id_Cliente = value;
					this.SendPropertyChanged("Id_Cliente");
					this.OnId_ClienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Modulo", DbType="Int NOT NULL")]
		public int Id_Modulo
		{
			get
			{
				return this._Id_Modulo;
			}
			set
			{
				if ((this._Id_Modulo != value))
				{
					if (this._Modulo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ModuloChanging(value);
					this.SendPropertyChanging();
					this._Id_Modulo = value;
					this.SendPropertyChanged("Id_Modulo");
					this.OnId_ModuloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cliente_ModCli", Storage="_Cliente", ThisKey="Id_Cliente", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.ModClis.Remove(this);
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.ModClis.Add(this);
						this._Id_Cliente = value.Id;
					}
					else
					{
						this._Id_Cliente = default(int);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Modulo_ModCli", Storage="_Modulo", ThisKey="Id_Modulo", OtherKey="Id", IsForeignKey=true)]
		public Modulo Modulo
		{
			get
			{
				return this._Modulo.Entity;
			}
			set
			{
				Modulo previousValue = this._Modulo.Entity;
				if (((previousValue != value) 
							|| (this._Modulo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Modulo.Entity = null;
						previousValue.ModClis.Remove(this);
					}
					this._Modulo.Entity = value;
					if ((value != null))
					{
						value.ModClis.Add(this);
						this._Id_Modulo = value.Id;
					}
					else
					{
						this._Id_Modulo = default(int);
					}
					this.SendPropertyChanged("Modulo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Modulo")]
	public partial class Modulo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descricao;
		
		private EntitySet<ModCli> _ModClis;
		
		private EntitySet<SenhaSGU> _SenhaSGUs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    #endregion
		
		public Modulo()
		{
			this._ModClis = new EntitySet<ModCli>(new Action<ModCli>(this.attach_ModClis), new Action<ModCli>(this.detach_ModClis));
			this._SenhaSGUs = new EntitySet<SenhaSGU>(new Action<SenhaSGU>(this.attach_SenhaSGUs), new Action<SenhaSGU>(this.detach_SenhaSGUs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descricao", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Modulo_ModCli", Storage="_ModClis", ThisKey="Id", OtherKey="Id_Modulo")]
		public EntitySet<ModCli> ModClis
		{
			get
			{
				return this._ModClis;
			}
			set
			{
				this._ModClis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Modulo_SenhaSGU", Storage="_SenhaSGUs", ThisKey="Id", OtherKey="Id_Modulo")]
		public EntitySet<SenhaSGU> SenhaSGUs
		{
			get
			{
				return this._SenhaSGUs;
			}
			set
			{
				this._SenhaSGUs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModClis(ModCli entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = this;
		}
		
		private void detach_ModClis(ModCli entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = null;
		}
		
		private void attach_SenhaSGUs(SenhaSGU entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = this;
		}
		
		private void detach_SenhaSGUs(SenhaSGU entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SenhaSGU")]
	public partial class SenhaSGU : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Usuario;
		
		private string _Senha;
		
		private int _Id_Cliente;
		
		private int _Id_Modulo;
		
		private EntityRef<Cliente> _Cliente;
		
		private EntityRef<Modulo> _Modulo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsuarioChanging(string value);
    partial void OnUsuarioChanged();
    partial void OnSenhaChanging(string value);
    partial void OnSenhaChanged();
    partial void OnId_ClienteChanging(int value);
    partial void OnId_ClienteChanged();
    partial void OnId_ModuloChanging(int value);
    partial void OnId_ModuloChanged();
    #endregion
		
		public SenhaSGU()
		{
			this._Cliente = default(EntityRef<Cliente>);
			this._Modulo = default(EntityRef<Modulo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usuario", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Usuario
		{
			get
			{
				return this._Usuario;
			}
			set
			{
				if ((this._Usuario != value))
				{
					this.OnUsuarioChanging(value);
					this.SendPropertyChanging();
					this._Usuario = value;
					this.SendPropertyChanged("Usuario");
					this.OnUsuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Senha", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Senha
		{
			get
			{
				return this._Senha;
			}
			set
			{
				if ((this._Senha != value))
				{
					this.OnSenhaChanging(value);
					this.SendPropertyChanging();
					this._Senha = value;
					this.SendPropertyChanged("Senha");
					this.OnSenhaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Cliente", DbType="Int NOT NULL")]
		public int Id_Cliente
		{
			get
			{
				return this._Id_Cliente;
			}
			set
			{
				if ((this._Id_Cliente != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ClienteChanging(value);
					this.SendPropertyChanging();
					this._Id_Cliente = value;
					this.SendPropertyChanged("Id_Cliente");
					this.OnId_ClienteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Modulo", DbType="Int NOT NULL")]
		public int Id_Modulo
		{
			get
			{
				return this._Id_Modulo;
			}
			set
			{
				if ((this._Id_Modulo != value))
				{
					if (this._Modulo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ModuloChanging(value);
					this.SendPropertyChanging();
					this._Id_Modulo = value;
					this.SendPropertyChanged("Id_Modulo");
					this.OnId_ModuloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cliente_SenhaSGU", Storage="_Cliente", ThisKey="Id_Cliente", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.SenhaSGUs.Remove(this);
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.SenhaSGUs.Add(this);
						this._Id_Cliente = value.Id;
					}
					else
					{
						this._Id_Cliente = default(int);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Modulo_SenhaSGU", Storage="_Modulo", ThisKey="Id_Modulo", OtherKey="Id", IsForeignKey=true)]
		public Modulo Modulo
		{
			get
			{
				return this._Modulo.Entity;
			}
			set
			{
				Modulo previousValue = this._Modulo.Entity;
				if (((previousValue != value) 
							|| (this._Modulo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Modulo.Entity = null;
						previousValue.SenhaSGUs.Remove(this);
					}
					this._Modulo.Entity = value;
					if ((value != null))
					{
						value.SenhaSGUs.Add(this);
						this._Id_Modulo = value.Id;
					}
					else
					{
						this._Id_Modulo = default(int);
					}
					this.SendPropertyChanged("Modulo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
